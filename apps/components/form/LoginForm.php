<?php 
namespace Apps\Components\Form;

use Cygnite\FormBuilder\Form;
use Cygnite\Foundation\Application;
use Cygnite\Common\UrlManager\Url;

/**
* Sample Form using Cygnite Form Builder
* This file generated by Cygnite CLI Generator.
* You may alter the code to fit your needs
*/

class LoginForm extends Form
{
    //set model object
    private $model;

    public $errors;

    private $segment;

    //set validator object
    public $validation;

    public $action = 'add';

    public function __construct($object = null)
    {
        // your model object
        $this->model = $object;
    }

    /**
     *  Build form and return object
     * @return UserForm
     */
    public function buildForm()
    {
        $id = (isset($this->model->id)) ? $this->model->id : '';

        // Following code is to display validation errors below the input box
        if (is_object($this->validation)) {
            $this->validator = $this->validation;// Errors will displayed below to inputs
            // Set your custom errors
            //$this->validator->setCustomError('column_name_error', 'Custom Error');
        }

        $this->open("UserController", array(
                    "method" => "post", "id"     => "uniform", "role"   => "form",
                    "action" => Url::sitePath("login/$this->action/"),
                    "style" => "width:500px;margin-top:35px;float:left;" )
        )
        ->addElement("label", "Email", array("class" => "col-sm-2 control-label","style" => "width:100%;"))
        ->addElement("text", "email", array("value" => (isset($this->model->email)) ? $this->model->email : "", "class" => "form-control"))
        ->addElement("label", "Password", array("class" => "col-sm-2 control-label","style" => "width:100%;"))
        ->addElement("text", "password", array("value" => (isset($this->model->password)) ? $this->model->password : "", "class" => "form-control"))
		->addElement("submit", "btnSubmit", array("value" => "Login", "class" => "btn btn-primary", "style" => "margin-top:15px;" ))
		->close()
		->createForm();


        return $this;
    }

    /**
     * Render form
     * @return type
     */
    public function render()
    {
        return $this->getForm();
    }
}